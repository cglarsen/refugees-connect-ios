//
//  ContactInformationViewController.swift
//  RefugeConnect
//
//  Created by Christian Graver on 03/03/2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Daman Clean Swift Xcode Templates
//  with inspiration from http://clean-swift.com
//

import UIKit
import FirebaseAuth
import FirebaseFirestore
import GeoFireUtils

class ContactInformationViewController: UIViewController {
	
	// MARK: - Outlets
	
	@IBOutlet var hostNameTextField: UITextField!
	@IBOutlet var landcodeTextField: UITextField!
	@IBOutlet var phoneNumberTextField: UITextField!
	@IBOutlet var verificationCodeLabel: UILabel!
	@IBOutlet var verificationCodeTextField: UITextField!
	@IBOutlet var verificationCodeButton: UIButton!
	@IBOutlet var statusOkImageView: UIImageView!
	@IBOutlet var finishButton: UIButton! {
		didSet {
			finishButton.setTitleColor(.black, for:.normal)
			finishButton.setTitleColor(.gray, for:.disabled)
			finishButton.isEnabled = true
		}
	}
	
	// MARK: - Properties
	var server: ServerRepository?
	var createShelter: ShelterVM?
	
	// MARK: - Init
	class func instantiate(server: ServerRepository, shelter: ShelterVM) -> ContactInformationViewController {
		let name = "\(ContactInformationViewController.self)"
		let storyboard = UIStoryboard(name: name, bundle: nil)
		let vc = storyboard.instantiateViewController(withIdentifier: name) as! ContactInformationViewController
		vc.server = server
		vc.createShelter = shelter
		return vc
	}
	
	// MARK: - View lifecycle
	override func viewDidLoad() {
		super.viewDidLoad()
		changeVerificationViewState(hidden: true)
		statusOkImageView.isHidden = true
		
	}
	
	// MARK: - Actions
	@IBAction func sendVerificationCodePressed(_ sender: Any) {
		guard let landcode = landcodeTextField.text, !landcode.isEmpty,
					let number = phoneNumberTextField.text,
					!number.isEmpty else {
						return
					}
		handlePhone("+\(landcode) \(number)")
	}
	@IBAction func verifyCodePressed(_ sender: Any) {
		guard let authCode = verificationCodeTextField.text,
					!authCode.isEmpty else {
						return
					}
		handleAuth(authCode)
	}
	
	@IBAction func finishPressed(_ sender: Any) {
		guard let currentUser = Auth.auth().currentUser,
					let phoneNumber = currentUser.phoneNumber else {
						return
					}
		
		let contactInfo = ShelterContactInfo(phoneNumber: phoneNumber,
																				 hostUID: currentUser.uid)
		
		guard let shelter = createShelter,
					let adults = shelter.accommodatesAdults,
					let startDate = shelter.startDate,
					let endDate = shelter.endDate,
					let maxDuration = shelter.maxDurationWeeks,
					let coarseLocation = shelter.coarseLocation else {
						print("createShelter not complete")
						return
					}
		
		var postShelter = Shelter(userID: currentUser.uid,
															hostName: hostNameTextField.text ?? "Just a host name",
															coarseLocation: GeoPoint(latitude: coarseLocation.latitude,
																											 longitude: coarseLocation.longitude),
															geoHash: GFUtils.geoHash(forLocation: coarseLocation),
															accommodatesAdults: adults,
															
															accommodatesChildren: shelter.accommodatesChildren ?? 0,
															accommodatesBabies: shelter.accommodatesBabies ?? 0,
															startDate: startDate,
															endDate: endDate,
															maxDurationWeeks: maxDuration,
															contactInfo: contactInfo)
		
		server?.addShelther(postShelter) { id in
//			if let id = id {
//				print("Successfully created shelter")
//				postShelter.hostName = "Christian Updated"
//				self.server?.updateShelther(postShelter, with: id) { id in
//					if let id = id {
//						print("Successfully updated shelter")
//						self.server?.getShelter(with: id, completion: { shelter in
//							if let shelter = shelter {
//								print("Successfully got shelter: \(shelter.hostName)")
//							}
//						})
//					}
//				}
//			}
		}
	}
	// MARK: - Misc
	private func handlePhone(_ number: String) {
		PhoneAuthProvider.provider()
			.verifyPhoneNumber(number, uiDelegate: nil) { verificationID, error in
				if let error = error {
					//self.verifyLabel.text = error.localizedDescription
					return
				}
				self.changeVerificationViewState(hidden: false)
				UserDefaults.standard.set(verificationID, forKey: "authVerificationID")
			}
	}
	
	private func handleAuth(_ code: String) {
		guard let verificationID = UserDefaults.standard.string(forKey: "authVerificationID") else {
			return
		}
		
		let credential = PhoneAuthProvider.provider().credential(
			withVerificationID: verificationID,
			verificationCode: code
		)
		
		Auth.auth().signIn(with: credential) { authResult, error in
			if let error = error {
				//self.errorTextView.text = error.localizedDescription
			}
			
			//User is signed in
			self.statusOkImageView.isHidden = false
			self.finishButton.isEnabled = true
		}
	}
	
	private func changeVerificationViewState(hidden: Bool) {
		verificationCodeLabel.isHidden = hidden
		verificationCodeTextField.isHidden = hidden
		verificationCodeButton.isHidden = hidden
	}
}
