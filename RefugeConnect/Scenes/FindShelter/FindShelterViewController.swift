//
//  FindShelterViewController.swift
//  RefugeConnect
//
//  Created by Christian Graver on 02/03/2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Daman Clean Swift Xcode Templates
//  with inspiration from http://clean-swift.com
//

import UIKit
import MapKit
import GeoFireUtils

class ShelterAnnotation: MKPointAnnotation {
	var shelter: Shelter?
}

class FindShelterViewController: UIViewController {
	
	// MARK: - Outlets
	@IBOutlet var mapView: MKMapView! {
		didSet {
			mapView.delegate = self
		}
	}
	@IBOutlet var shelterSheet: UIView! {
		didSet {
			shelterSheet.layer.cornerRadius = 10
			shelterSheet.layer.borderWidth = 1.5
			shelterSheet.layer.borderColor = UIColor.blue.cgColor
		}
	}
	@IBOutlet var shelterSheetAnimatableConstraint: NSLayoutConstraint!
	@IBOutlet var hostNameLabel: UILabel!
	@IBOutlet var adultLabel: UILabel!
	@IBOutlet var childrenLabel: UILabel!
	@IBOutlet var babiesLabel: UILabel!
	
	// MARK: - Properties
	var server: ServerRepository!
	
	// MARK: - Init
	class func instantiate(server: ServerRepository) -> FindShelterViewController {
		let name = "\(FindShelterViewController.self)"
		let storyboard = UIStoryboard(name: name, bundle: nil)
		let vc = storyboard.instantiateViewController(withIdentifier: name) as! FindShelterViewController
		vc.server = server
		return vc
	}
	
	// MARK: - View lifecycle
	override func viewDidLoad() {
		super.viewDidLoad()
		fetchShelters()
	}
	
	// MARK: - Server interaction
	private func fetchShelters() {
//		let rect = mapView.visibleMapRect
//		let neMapPoint = MKMapPoint(x: rect.maxX, y: rect.origin.y)
//		let swMapPoint = MKMapPoint(x: rect.origin.x, y: rect.maxY)
//
//		let neCoordinate = neMapPoint.coordinate
//		let swCoordinate = swMapPoint.coordinate
//
//		let cornerDistance = neMapPoint.distance(to: swMapPoint)
//
//		let qyeryBounds = GFUtils.queryBounds(forLocation: mapView.centerCoordinate, withRadius: cornerDistance)
		
		server.getShelters { shelters in
			for shelter in shelters {
				let shelterAnnotation = ShelterAnnotation()
				shelterAnnotation.shelter = shelter
				shelterAnnotation.coordinate = CLLocationCoordinate2D(latitude: shelter.coarseLocation.latitude, longitude: shelter.coarseLocation.longitude)
				self.mapView.addAnnotation(shelterAnnotation)
			}
			self.mapView.fitAllAnnotations()
		}
	}
	
	// MARK: - Actions
	
	// MARK: - Misc
}

extension FindShelterViewController: MKMapViewDelegate {
	func mapView(_ mapView: MKMapView, didSelect view: MKAnnotationView) {
		self.view.layoutIfNeeded()
		UIView.animate(withDuration: 0.15) {
			self.shelterSheetAnimatableConstraint.constant = 80
			self.view.layoutIfNeeded()
		}
	}
	
	func mapView(_ mapView: MKMapView, didDeselect view: MKAnnotationView) {
		if let annotation = view.annotation as? ShelterAnnotation,
			 let shelter = annotation.shelter {
			hostNameLabel.text = shelter.hostName
			hostNameLabel.setNeedsLayout()
			adultLabel.text = "\(shelter.accommodatesAdults)"
			adultLabel.setNeedsLayout()
			childrenLabel.text = "\(shelter.accommodatesChildren)"
			childrenLabel.setNeedsLayout()
			babiesLabel.text = "\(shelter.accommodatesBabies)"
			babiesLabel.setNeedsLayout()
		}
		self.view.setNeedsLayout()
		UIView.animate(withDuration: 0.15) {
			self.shelterSheetAnimatableConstraint.constant = -40
			self.view.layoutIfNeeded()
		}
	}
}
